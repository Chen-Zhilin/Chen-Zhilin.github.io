<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Czhlin&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/9827fa3822bdd5e6d02ed7ce58a4a1f4</icon>
  <subtitle>天才和疯子总要做一个吧！</subtitle>
  <link href="http://blog.czhlin.top/atom.xml" rel="self"/>
  
  <link href="http://blog.czhlin.top/"/>
  <updated>2021-06-16T02:24:48.401Z</updated>
  <id>http://blog.czhlin.top/</id>
  
  <author>
    <name>czhlin</name>
    <email>2324133088@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>877. 石子游戏</title>
    <link href="http://blog.czhlin.top/2021/06/16/877-%E7%9F%B3%E5%AD%90%E6%B8%B8%E6%88%8F/"/>
    <id>http://blog.czhlin.top/2021/06/16/877-%E7%9F%B3%E5%AD%90%E6%B8%B8%E6%88%8F/</id>
    <published>2021-06-16T02:19:02.000Z</published>
    <updated>2021-06-16T02:24:48.401Z</updated>
    
    <content type="html"><![CDATA[<h1 id="877-石子游戏"><a href="#877-石子游戏" class="headerlink" title="877. 石子游戏"></a><a href="https://leetcode-cn.com/problems/stone-game/" target="_blank" rel="noopener">877. 石子游戏</a></h1><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>亚历克斯和李用几堆石子在做游戏。偶数堆石子排成一行，每堆都有正整数颗石子 <code>piles[i]</code> 。游戏以谁手中的石子最多来决出胜负。石子的总数是奇数，所以没有平局。亚历克斯和李轮流进行，亚历克斯先开始。 每回合，玩家从行的开始或结束处取走整堆石头。 这种情况一直持续到没有更多的石子堆为止，此时手中石子最多的玩家获胜。假设亚历克斯和李都发挥出最佳水平，当亚历克斯赢得比赛时返回 <code>true</code> ，当李赢得比赛时返回 <code>false</code> 。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：[5,3,4,5]</span><br><span class="line">输出：true</span><br><span class="line">解释：</span><br><span class="line">亚历克斯先开始，只能拿前 5 颗或后 5 颗石子 。</span><br><span class="line">假设他取了前 5 颗，这一行就变成了 [3,4,5] 。</span><br><span class="line">如果李拿走前 3 颗，那么剩下的是 [4,5]，亚历克斯拿走后 5 颗赢得 10 分。</span><br><span class="line">如果李拿走后 5 颗，那么剩下的是 [3,4]，亚历克斯拿走后 4 颗赢得 9 分。</span><br><span class="line">这表明，取前 5 颗石子对亚历克斯来说是一个胜利的举动，所以我们返回 true 。</span><br></pre></td></tr></table></figure><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><ul><li><p>三维动态规划</p><ul><li><p><code>len=piles.length</code>    <code>dp[len][len][2]</code></p></li><li><p><code>dp[i][j][0]</code>表示在<code>piles</code>中以下标<code>i</code>到<code>j</code>的子数组集，亚历克斯获得的石子总数</p></li><li><p><code>dp[i][j][1]</code>表示在<code>piles</code>中以下标<code>i</code>到<code>j</code>的子数组集，李获得的石子总数</p></li><li><p>状态转移方程：<br>$$<br>dp[i][j]=\begin{cases}[dp[i+1][j][1]+piles[i],dp[i+1][j][0]],&amp;\text{dp[i+1][j][1]+piles[i]&gt;dp[i][j-1][1]+piles[j]}\ [dp[i][j-1][1]+piles[j],dp[i][j-1][0]],&amp;\text{dp[i+1][j][1]+piles[i]&lt;dp[i][j-1][1]+piles[j]}\end{cases}<br>$$</p></li><li><p>最终返回值：<code>dp[0][len-1][0]&gt;dp[0][len-1][1]</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">stoneGame</span><span class="params">(<span class="keyword">int</span>[] piles)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len=piles.length;</span><br><span class="line">        <span class="keyword">int</span>[][][] dp=<span class="keyword">new</span> <span class="keyword">int</span>[len][len][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            dp[i][i][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">            dp[i][i][<span class="number">0</span>]=piles[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;len;k++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i+k&lt;len;i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> j=i+k;</span><br><span class="line">                <span class="keyword">if</span>(dp[i+<span class="number">1</span>][j][<span class="number">1</span>]+piles[i]&gt;dp[i][j-<span class="number">1</span>][<span class="number">1</span>]+piles[j])&#123;</span><br><span class="line">                    dp[i][j][<span class="number">0</span>]=dp[i+<span class="number">1</span>][j][<span class="number">1</span>]+piles[i];</span><br><span class="line">                    dp[i][j][<span class="number">1</span>]=dp[i+<span class="number">1</span>][j][<span class="number">0</span>];</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    dp[i][j][<span class="number">0</span>]=dp[i][j-<span class="number">1</span>][<span class="number">1</span>]+piles[j];</span><br><span class="line">                    dp[i][j][<span class="number">1</span>]=dp[i][j-<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][len-<span class="number">1</span>][<span class="number">0</span>]&gt;dp[<span class="number">0</span>][len-<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>进阶改良</p><ul><li><p><code>len=piles.length</code>   <code>dp[len][len]</code></p></li><li><p><code>dp[i][j]</code>表示在<code>piles</code>中以下标<code>i</code>到<code>j</code>的子数组集，亚历克斯获得的石子总数减去李获得的石子总数</p></li><li><p>状态转移方程：<br>$$<br>dp[i][j]=max(piles[i]-dp[i+1][j],piles[j]-dp[i][j-1])<br>$$</p></li><li><p>最终返回值：<code>dp[0][len]&gt;0</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//二维dp</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">stoneGame</span><span class="params">(<span class="keyword">int</span>[] piles)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len=piles.length;</span><br><span class="line">        <span class="keyword">int</span>[][] dp=<span class="keyword">new</span> <span class="keyword">int</span>[len][len];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            dp[i][i]=piles[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;len;k++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i+k&lt;len;i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> j=i+k;</span><br><span class="line">                dp[i][j]=Math.max(piles[i]-dp[i+<span class="number">1</span>][j],piles[j]-dp[i][j-<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][len-<span class="number">1</span>]&gt;<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一维数组，用于只用到dp[i+1][j]和dp[i][j-1]可以用一维数组来存储</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">stoneGame</span><span class="params">(<span class="keyword">int</span>[] piles)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> len=piles.length;</span><br><span class="line">      <span class="keyword">int</span>[] dp=<span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">          dp[i]=piles[i];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;len;k++)&#123;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> i=len-k-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">              <span class="keyword">int</span> j=i+k;</span><br><span class="line">              dp[j]=Math.max(piles[i]-dp[j],piles[j]-dp[j-<span class="number">1</span>]);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> dp[len-<span class="number">1</span>]&gt;<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="数学分析"><a href="#数学分析" class="headerlink" title="数学分析"></a>数学分析</h3><ul><li><p>石堆可以分成两组，并且无论怎么分最终都有一人会胜出所以存在一个最终获胜的一组</p></li><li><p>亚历克斯是每次的先手，这意味着他可以每次都选择最终获胜的那一组中的子元素。</p></li><li><p>所以亚历克斯如果不失误，他就一定会赢。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">stoneGame</span><span class="params">(<span class="keyword">int</span>[] piles)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;877-石子游戏&quot;&gt;&lt;a href=&quot;#877-石子游戏&quot; class=&quot;headerlink&quot; title=&quot;877. 石子游戏&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/stone-game/&quot; target</summary>
      
    
    
    
    <category term="编程" scheme="http://blog.czhlin.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="力扣" scheme="http://blog.czhlin.top/tags/%E5%8A%9B%E6%89%A3/"/>
    
  </entry>
  
  <entry>
    <title>flex布局的使用</title>
    <link href="http://blog.czhlin.top/2021/06/10/flex%E5%B8%83%E5%B1%80%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://blog.czhlin.top/2021/06/10/flex%E5%B8%83%E5%B1%80%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2021-06-10T00:29:34.000Z</published>
    <updated>2021-06-10T00:38:13.543Z</updated>
    
    <content type="html"><![CDATA[<h1 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h1><h2 id="传统布局与flex布局"><a href="#传统布局与flex布局" class="headerlink" title="传统布局与flex布局"></a>传统布局与flex布局</h2><h3 id="传统布局"><a href="#传统布局" class="headerlink" title="传统布局"></a>传统布局</h3><ul><li>兼容性好</li><li>布局繁琐</li><li>不能在移动端布局</li></ul><h3 id="flex弹性布局"><a href="#flex弹性布局" class="headerlink" title="flex弹性布局"></a>flex弹性布局</h3><ul><li>操作方便，布局极为简单</li><li>PC端浏览器支持情况较差</li><li>IE11或更低版本，不支持或仅部分支持</li></ul><h2 id="布局原理"><a href="#布局原理" class="headerlink" title="布局原理"></a>布局原理</h2><blockquote><p>flex布局用来为盒状模型提供最大的灵活性，任何一个容器都可以指定为flex布局</p></blockquote><ul><li>父元素指定为<strong>flex</strong>时,子元素的<strong>float、clear和vertical-align属性将失效</strong></li><li>flex布局的元素称呼<ul><li><strong>Flex容器</strong>：采用felx布局的元素</li><li><strong>Flex项目</strong>：Flex容器中的子元素</li><li><strong>Flex项目</strong>在<strong>Flex容器</strong>中可以横向排列也可以纵向排列</li></ul></li><li>原理：通过给<strong>父盒子添加flex属性</strong>，来<strong>控制子盒子的位置和排列方式</strong></li></ul><h2 id="常见父项属性"><a href="#常见父项属性" class="headerlink" title="常见父项属性"></a>常见父项属性</h2><ul><li><p>flex-direction:设置主轴的方向</p><ul><li><p><strong>默认主轴</strong>方向是<strong>x轴</strong>方向，水平向右</p></li><li><p><strong>默认侧轴</strong>方向是<strong>y轴</strong>方向，水平向下</p></li><li><p><strong>flex-dirction设置谁为主轴，剩下的就是侧轴</strong></p><table><thead><tr><th align="center">属性值</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">row</td><td align="left">默认值从左到右</td></tr><tr><td align="center">row-reverse</td><td align="left">从右到左</td></tr><tr><td align="center">column</td><td align="left">从上到下</td></tr><tr><td align="center">colunmn-reverse</td><td align="left">从下到上</td></tr></tbody></table></li></ul></li><li><p>justify-content:设置主轴的子元素排列方式</p><table><thead><tr><th align="center">属性值</th><th>说明</th></tr></thead><tbody><tr><td align="center">flex-start</td><td>默认值从头部开始，如果主轴是x轴，则从左到右</td></tr><tr><td align="center">flex-end</td><td>从尾部开始排列</td></tr><tr><td align="center">center</td><td>在主轴居中对齐(如果主轴是x轴则水平居中)</td></tr><tr><td align="center">space-around</td><td>平分剩余空间</td></tr><tr><td align="center">space-between</td><td>先两边贴边再平分剩余空间(重要)</td></tr></tbody></table></li><li><p>flex-wrap:设置子元素是否换行</p><table><thead><tr><th align="center">属性值</th><th>说明</th></tr></thead><tbody><tr><td align="center">wrap</td><td>一行放不下就换行</td></tr><tr><td align="center">nowrap</td><td>一行放不下，缩小元素的宽度，强塞进一行</td></tr></tbody></table></li><li><p>align-content:设置侧轴上的子元素的排列方式(多行)</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>flex-start</td><td>默认值 从上到下</td></tr><tr><td>flex-end</td><td>从下到上</td></tr><tr><td>center</td><td>挤在一起居中(垂直居中)</td></tr><tr><td>stretch</td><td>拉伸</td></tr><tr><td>space-around</td><td>平分剩余空间</td></tr><tr><td>space-between</td><td>先两边贴边再平分剩余空间(重要)</td></tr></tbody></table></li><li><p>align-items:设置侧轴上的子元素排列方式(单行)</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>flex-start</td><td>默认值 从上到下</td></tr><tr><td>flex-end</td><td>从下到上</td></tr><tr><td>center</td><td>挤在一起居中(垂直居中)</td></tr><tr><td>stretch</td><td>拉伸</td></tr></tbody></table></li><li><p>flex-flow:复合属性，相当于同时设置了flex-direction和flex-wrap</p></li></ul><h2 id="flex布局子项常见属性"><a href="#flex布局子项常见属性" class="headerlink" title="flex布局子项常见属性"></a>flex布局子项常见属性</h2><ul><li><p>flex子项目占的份数:(属性值为数值)</p></li><li><p>align-self控制子项目自己在侧轴的排列方式</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>flex-start</td><td>默认值 从上到下</td></tr><tr><td>flex-end</td><td>从下到上</td></tr><tr><td>center</td><td>挤在一起居中(垂直居中)</td></tr><tr><td>stretch</td><td>拉伸</td></tr><tr><td>space-around</td><td>平分剩余空间</td></tr><tr><td>space-between</td><td>先两边贴边再平分剩余空间(重要)</td></tr></tbody></table></li><li><p>order属性定义子项的排列顺序(前后顺序):(属性值为数值，越小越排在前面)</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;flex布局&quot;&gt;&lt;a href=&quot;#flex布局&quot; class=&quot;headerlink&quot; title=&quot;flex布局&quot;&gt;&lt;/a&gt;flex布局&lt;/h1&gt;&lt;h2 id=&quot;传统布局与flex布局&quot;&gt;&lt;a href=&quot;#传统布局与flex布局&quot; class=&quot;header</summary>
      
    
    
    
    <category term="编程" scheme="http://blog.czhlin.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="css" scheme="http://blog.czhlin.top/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>The 2021 Sichuan Provincial Collegiate Programming Contest</title>
    <link href="http://blog.czhlin.top/2021/06/06/2021%20%E5%B9%B4%E5%9B%9B%E5%B7%9D%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B/"/>
    <id>http://blog.czhlin.top/2021/06/06/2021%20%E5%B9%B4%E5%9B%9B%E5%B7%9D%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B/</id>
    <published>2021-06-06T05:01:38.871Z</published>
    <updated>2021-06-06T05:18:13.789Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2021-年第十三届四川省-ACM-ICPC-大学生程序设计竞赛部分题解"><a href="#2021-年第十三届四川省-ACM-ICPC-大学生程序设计竞赛部分题解" class="headerlink" title="2021 年第十三届四川省 ACM-ICPC 大学生程序设计竞赛部分题解"></a>2021 年第十三届四川省 ACM-ICPC 大学生程序设计竞赛部分题解</h1><h2 id="参赛"><a href="#参赛" class="headerlink" title="参赛"></a>参赛</h2><p>本人和队员参加本次的acm比赛，西南民大环境优美，挺大的,小姐姐挺好的。</p><h2 id="A题"><a href="#A题" class="headerlink" title="A题"></a>A题</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>给定正整数 k，问有多少正整数对 (x, y) 满足 x + y = k 且<br>1 ≤ x ≤ y ≤ 6。<br><a href="https://codeforces.com/gym/103117/problem/A" target="_blank" rel="noopener">原题</a></p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>官方思路</strong></p><ul><li>x 和 y 的可行范围很小，直接枚举即可。</li></ul><p><strong>本人思路</strong></p><ul><li>穷举k从2到12的所有答案。对于k&lt;2或者k&gt;12的情况，答案都是0</li></ul><table><thead><tr><th align="left">k</th><th align="left">ans</th></tr></thead><tbody><tr><td align="left">&lt;2</td><td align="left">0</td></tr><tr><td align="left">2</td><td align="left">1</td></tr><tr><td align="left">3</td><td align="left">1</td></tr><tr><td align="left">4</td><td align="left">2</td></tr><tr><td align="left">5</td><td align="left">2</td></tr><tr><td align="left">6</td><td align="left">3</td></tr><tr><td align="left">7</td><td align="left">3</td></tr><tr><td align="left">8</td><td align="left">3</td></tr><tr><td align="left">9</td><td align="left">2</td></tr><tr><td align="left">10</td><td align="left">2</td></tr><tr><td align="left">11</td><td align="left">1</td></tr><tr><td align="left">12</td><td align="left">1</td></tr><tr><td align="left">&gt;12</td><td align="left">0</td></tr></tbody></table><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        InputReader cin = <span class="keyword">new</span> InputReader();</span><br><span class="line">        PrintWriter out = <span class="keyword">new</span> PrintWriter(System.out, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">int</span> T=cin.nextInt();</span><br><span class="line">        <span class="keyword">while</span> (T--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            out.println(getResult(cin.nextInt()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getResult</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;=<span class="number">1</span>||n&gt;=<span class="number">13</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">2</span>||n==<span class="number">3</span>||n==<span class="number">11</span>||n==<span class="number">12</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">4</span>||n==<span class="number">5</span>||n==<span class="number">9</span>||n==<span class="number">10</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InputReader</span> </span>&#123;</span><br><span class="line">        BufferedReader buf;</span><br><span class="line">        StringTokenizer tok;</span><br><span class="line"></span><br><span class="line">        InputReader() &#123;</span><br><span class="line">            buf = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (tok == <span class="keyword">null</span> || !tok.hasMoreElements()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    tok = <span class="keyword">new</span> StringTokenizer(buf.readLine());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">String <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (hasNext()) <span class="keyword">return</span> tok.nextToken();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">nextLine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> buf.readLine();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">nextInt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.parseInt(next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">long</span> <span class="title">nextLong</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Long.parseLong(next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">double</span> <span class="title">nextDouble</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Double.parseDouble(next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">BigInteger <span class="title">nextBigInteger</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BigInteger(next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">BigDecimal <span class="title">nextBigDecimal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BigDecimal(next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B题"><a href="#B题" class="headerlink" title="B题"></a>B题</h2><h3 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h3><p>n 个人围成一圈吃火锅。从第一个人开始轮流行动。每个人有且<br>仅有一种喜欢的食物。轮到一个人行动时，如果锅里有他喜欢的<br>食物，他就全吃光，他的快乐值 +1。否则，他就会往锅里下一<br>些他喜欢吃的食物，并结束行动。问所有人共行动 m 次后每个<br>人的快乐值。<br><a href="https://codeforces.com/gym/103117/problem/B" target="_blank" rel="noopener">原题</a></p><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>官方思路：</strong></p><ul><li>各种食物互相独立，可以分别求解。 </li><li>注意到行动 2n 步后一定会回到初始状态。</li><li>对于前面完整的若干个循环，直接模拟计算一个循环内喜欢 当前食物的所有人的得分即可。</li><li>对于最后一段不完整的行 动，单独模拟。这样对于一种食物来说，时间复杂度是和喜 欢这种食物的人数线性相关的。 </li><li>总时间复杂度 O(n)。</li></ul><p><strong>本人思路：</strong></p><ul><li>先计算出r=m/n,即有r轮完整的一轮</li><li>再计算出q=m%n,即有q次行动达不到完整的一轮</li><li>先建立完整行动一轮的快乐值变化映射表（a[i],i,h[i]),然后模拟一轮得到映射值，（i代表是i号人）</li><li>根据map.get(a[i]).size()知道喜欢吃a[i]的人有多少人，如果人数为偶数，则i号人每一轮快乐值变化就是map.get(a[i]).get(i)的变化，如果人数为奇数，完整轮数r为偶数，发现r轮后每人快乐值都增加r/2；如果人数为奇数，完整论数r为奇数，则快乐值增加(r-1)/2+map.get(a[i]).get(i)</li><li>对于q次的处理可以模拟也可以合并到完整轮数中</li></ul><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-04-15:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> InputReader cin = <span class="keyword">new</span> InputReader();</span><br><span class="line">    <span class="keyword">static</span> PrintWriter out = <span class="keyword">new</span> PrintWriter(System.out, <span class="keyword">true</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> T=cin.nextInt();</span><br><span class="line">        <span class="keyword">while</span> (T--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> n=cin.nextInt();</span><br><span class="line">            <span class="keyword">int</span> k=cin.nextInt();</span><br><span class="line">            <span class="keyword">int</span> m=cin.nextInt();</span><br><span class="line">            HashSet&lt;Integer&gt; hotpot=<span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">            HashMap&lt;Integer,HashMap&lt;Integer,Integer&gt;&gt; map=<span class="keyword">new</span> HashMap&lt;Integer,HashMap&lt;Integer,Integer&gt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line">                map.put(i,<span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> r=m/n;</span><br><span class="line">            <span class="keyword">int</span> q=m%n;</span><br><span class="line">            <span class="keyword">int</span>[] a=<span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">            <span class="keyword">int</span>[] h=<span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">                a[i]=cin.nextInt();</span><br><span class="line">                map.get(a[i]).put(i,<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            HashMap&lt;Integer,Integer&gt; aMap;</span><br><span class="line">            <span class="keyword">if</span>(r&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(hotpot.contains(a[i]))&#123;</span><br><span class="line">                        map.get(a[i]).put(i,<span class="number">1</span>);</span><br><span class="line">                        hotpot.remove(a[i]);</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        hotpot.add(a[i]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                hotpot.clear();</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">                    aMap=map.get(a[i]);</span><br><span class="line">                    <span class="keyword">int</span> len=aMap.size();</span><br><span class="line">                    <span class="keyword">if</span>(len%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                        h[i]=r*aMap.get(i);</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span>(r%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                            h[i]=r/<span class="number">2</span>;</span><br><span class="line">                        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                            h[i]=r/<span class="number">2</span>+aMap.get(i);</span><br><span class="line">                            <span class="keyword">if</span>(aMap.get(i)==<span class="number">0</span>)&#123;</span><br><span class="line">                                hotpot.add(a[i]);</span><br><span class="line">                            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                                hotpot.remove(a[i]);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;q;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(hotpot.contains(a[i]))&#123;</span><br><span class="line">                   h[i]++;</span><br><span class="line">                    hotpot.remove(a[i]);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    hotpot.add(a[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            printArr(h);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArr</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">          System.out.print(arr[i]);</span><br><span class="line">          <span class="keyword">if</span>(i&lt;arr.length-<span class="number">1</span>)&#123;</span><br><span class="line">              System.out.print(<span class="string">" "</span>);</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">              System.out.println();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InputReader</span> </span>&#123;</span><br><span class="line">        BufferedReader buf;</span><br><span class="line">        StringTokenizer tok;</span><br><span class="line"></span><br><span class="line">        InputReader() &#123;</span><br><span class="line">            buf = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (tok == <span class="keyword">null</span> || !tok.hasMoreElements()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    tok = <span class="keyword">new</span> StringTokenizer(buf.readLine());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">String <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (hasNext()) <span class="keyword">return</span> tok.nextToken();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">nextLine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> buf.readLine();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">nextInt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.parseInt(next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">long</span> <span class="title">nextLong</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Long.parseLong(next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">double</span> <span class="title">nextDouble</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Double.parseDouble(next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">BigInteger <span class="title">nextBigInteger</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BigInteger(next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">BigDecimal <span class="title">nextBigDecimal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BigDecimal(next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C题"><a href="#C题" class="headerlink" title="C题"></a>C题</h2><h2 id="描述-2"><a href="#描述-2" class="headerlink" title="描述"></a>描述</h2><p>有一个均匀的三角形薄片 ABC，三个顶点各有一条细线连到一 个点 D 上。给定三边的长度和三条细线的长度，问提起 D 让三 角形自然落下到稳定状态时，三个顶点距离 D 的垂直距离。</p><p><a href="https://codeforces.com/gym/103117/problem/C" target="_blank" rel="noopener">原题</a></p><h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>官方思路</strong></p><ul><li>稳定状态下，三角形的重心位于 D 的正下方。</li><li>在三条线全拉直的情况下，计算三棱锥把重心旋转到 D 正 下方时 A, B, C 各自的坐标即可。 </li><li>只能拉直一条线或两条线的答案比较好计算，但是要小心判 断什么时候会发生这两种情况。</li></ul><p><strong>本人并没有做出来但可以提供几个解题公式和资料</strong></p><ul><li><p>当三条线全拉直的情况下，会构成一个四面体，<a href="https://wenku.baidu.com/view/a172449ffad6195f302ba602.html" target="_blank" rel="noopener">参考资料</a></p><p><img src="/images/C-1.png" alt="image-20210606114407686"></p></li><li><p>当两条线拉直的情况，此时会构成一个平面四边形，<a href="https://zhuanlan.zhihu.com/p/25937122" target="_blank" rel="noopener">参考资料</a></p><p><img src="/images/C-2.png" alt="image-20210606115659477"></p></li></ul><p><img src="/images/C-3.png" alt="image-20210606115831944"></p><ul><li>一条边拉直的情况，此时会构成一个悬挂三角形：D点到重心O点是一个垂直直线，D点和一顶点(A or B or C)还有重心O共线,并刚好是该顶点的中线的延长线。</li><li>最难的地方在于怎么判断哪些边会拉直</li></ul><h3 id="参考计算代码"><a href="#参考计算代码" class="headerlink" title="参考计算代码"></a>参考计算代码</h3><ul><li>三条边全拉直</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printAns</span><span class="params">(<span class="keyword">double</span> x,<span class="keyword">double</span> y,<span class="keyword">double</span> z,<span class="keyword">double</span> a,<span class="keyword">double</span> b,<span class="keyword">double</span> c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> OD=Math.sqrt(<span class="number">3</span>*(x*x+y*y+z*z)-(a*a+b*b+c*c))/<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">double</span> OA=Math.sqrt(<span class="number">2</span>*(b*b+c*c)-a*a)/<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">double</span> OB=Math.sqrt(<span class="number">2</span>*(a*a+c*c)-b*b)/<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">double</span> OC=Math.sqrt(<span class="number">2</span>*(a*a+b*b)-c*c)/<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">double</span> Sa=getS(x,OA,OD);</span><br><span class="line">        <span class="keyword">double</span> Sb=getS(y,OB,OD);</span><br><span class="line">        <span class="keyword">double</span> Sc=getS(z,OC,OD);</span><br><span class="line">        <span class="keyword">double</span> ka=<span class="number">2</span>*Sa/OD;</span><br><span class="line">        <span class="keyword">double</span> kb=<span class="number">2</span>*Sb/OD;</span><br><span class="line">        <span class="keyword">double</span> kc=<span class="number">2</span>*Sc/OD;</span><br><span class="line">        <span class="keyword">double</span> ha=Math.sqrt(x*x-ka*ka);</span><br><span class="line">        <span class="keyword">double</span> hb=Math.sqrt(y*y-kb*kb);</span><br><span class="line">        <span class="keyword">double</span> hc=Math.sqrt(z*z-kc*kc);</span><br><span class="line">        ha=ha==<span class="number">0.0</span>?ha:-ha;</span><br><span class="line">        hb=hb==<span class="number">0.0</span>?hb:-hb;</span><br><span class="line">        hc=hc==<span class="number">0.0</span>?hc:-hc;</span><br><span class="line">        StringBuilder sb=<span class="keyword">new</span> StringBuilder();</span><br><span class="line">        sb.append(ha);</span><br><span class="line">        sb.append(<span class="string">" "</span>);</span><br><span class="line">        sb.append(hb);</span><br><span class="line">        sb.append(<span class="string">" "</span>);</span><br><span class="line">        sb.append(hc);</span><br><span class="line">        out.println(sb.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">double</span> <span class="title">getS</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">double</span> b,<span class="keyword">double</span> c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> p=(a+b+c)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">double</span> res=Math.sqrt(p*(p-a)*(p-b)*(p-c));</span><br><span class="line">        <span class="keyword">return</span> Double.isNaN(res)?<span class="number">0</span>:res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>未AC代码仅供参考<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-05-10:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> InputReader cin = <span class="keyword">new</span> InputReader();</span><br><span class="line">    <span class="keyword">static</span> PrintWriter out = <span class="keyword">new</span> PrintWriter(System.out, <span class="keyword">true</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> T=cin.nextInt();</span><br><span class="line">        <span class="keyword">while</span> (T--&gt;<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">double</span> []xyz=<span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">3</span>];</span><br><span class="line">            <span class="keyword">int</span> minIndex=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">double</span> minVal=Double.MAX_VALUE;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">                xyz[i]=cin.nextInt();</span><br><span class="line">                <span class="keyword">if</span>(minVal&gt;xyz[i])&#123;</span><br><span class="line">                    minIndex=i;</span><br><span class="line">                    minVal=xyz[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> a=cin.nextInt();</span><br><span class="line">            <span class="keyword">int</span> b=cin.nextInt();</span><br><span class="line">            <span class="keyword">int</span> c=cin.nextInt();</span><br><span class="line">            <span class="keyword">int</span> tights=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> []isTight=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">            isTight[minIndex]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span>[] sides=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;c,a,b&#125;;</span><br><span class="line">            <span class="keyword">int</span> j=(minIndex+<span class="number">1</span>)%<span class="number">3</span>;</span><br><span class="line">            <span class="keyword">int</span> k=(minIndex+<span class="number">2</span>)%<span class="number">3</span>;</span><br><span class="line">            <span class="keyword">if</span>(getSides(sides[minIndex],sides[k],sides[j],xyz[minIndex])&lt;=xyz[j])&#123;</span><br><span class="line">                isTight[j]=-<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(getDiagonal(xyz[minIndex],xyz[k],sides[j],sides[minIndex],sides[k])&lt;=xyz[j])&#123;</span><br><span class="line">                    isTight[j]=-<span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    tights++;</span><br><span class="line">                    isTight[j]=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(getSides(sides[k],sides[minIndex],sides[j],xyz[minIndex])&lt;=xyz[k])&#123;</span><br><span class="line">                isTight[k]=-<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(getDiagonal(xyz[j],xyz[minIndex],sides[k],sides[j],sides[minIndex])&lt;=xyz[k])&#123;</span><br><span class="line">                    isTight[k]=-<span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    tights++;</span><br><span class="line">                    isTight[k]=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(tights==<span class="number">2</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(isTight[i]==-<span class="number">1</span>)&#123;</span><br><span class="line">                        j=(i+<span class="number">1</span>)%<span class="number">3</span>;</span><br><span class="line">                        k=(i+<span class="number">2</span>)%<span class="number">3</span>;</span><br><span class="line">                        xyz[i]=getDiagonal(xyz[k],xyz[j],sides[i],sides[k],sides[j]);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(tights==<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(isTight[i]==<span class="number">1</span>)&#123;</span><br><span class="line">                        j=(i+<span class="number">1</span>)%<span class="number">3</span>;</span><br><span class="line">                        k=(i+<span class="number">2</span>)%<span class="number">3</span>;</span><br><span class="line">                        xyz[j]=getSides(sides[i],sides[k],sides[j],xyz[i]);</span><br><span class="line">                        xyz[k]=getSides(sides[k],sides[i],sides[j],xyz[i]);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            printAns(xyz[<span class="number">0</span>],xyz[<span class="number">1</span>],xyz[<span class="number">2</span>],a,b,c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">double</span> <span class="title">getDiagonal</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">double</span> b,<span class="keyword">double</span> c,<span class="keyword">double</span> d,<span class="keyword">double</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> S=getS(a,b,n)+getS(c,d,n);</span><br><span class="line">        <span class="keyword">double</span> D=Math.abs((b*b+d*d)-(a*a+c*c));</span><br><span class="line">        <span class="keyword">double</span> res=Math.sqrt(<span class="number">16</span>*S*S+D*D)/(<span class="number">2</span>*n);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">double</span> <span class="title">getSides</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">double</span> b,<span class="keyword">double</span> c,<span class="keyword">double</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> k=Math.sqrt(<span class="number">2</span>*(a*a+b*b)-c*c)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">double</span> cosA=(k*k+c*c/<span class="number">4</span>-a*a)/(k*c);</span><br><span class="line">        k+=n;</span><br><span class="line">        <span class="keyword">double</span> res=Math.sqrt(k*k+c*c/<span class="number">4</span>-c*k*cosA);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printAns</span><span class="params">(<span class="keyword">double</span> x,<span class="keyword">double</span> y,<span class="keyword">double</span> z,<span class="keyword">double</span> a,<span class="keyword">double</span> b,<span class="keyword">double</span> c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> OD=Math.sqrt(<span class="number">3</span>*(x*x+y*y+z*z)-(a*a+b*b+c*c))/<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">double</span> OA=Math.sqrt(<span class="number">2</span>*(b*b+c*c)-a*a)/<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">double</span> OB=Math.sqrt(<span class="number">2</span>*(a*a+c*c)-b*b)/<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">double</span> OC=Math.sqrt(<span class="number">2</span>*(a*a+b*b)-c*c)/<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">double</span> Sa=getS(x,OA,OD);</span><br><span class="line">        <span class="keyword">double</span> Sb=getS(y,OB,OD);</span><br><span class="line">        <span class="keyword">double</span> Sc=getS(z,OC,OD);</span><br><span class="line">        <span class="keyword">double</span> ka=<span class="number">2</span>*Sa/OD;</span><br><span class="line">        <span class="keyword">double</span> kb=<span class="number">2</span>*Sb/OD;</span><br><span class="line">        <span class="keyword">double</span> kc=<span class="number">2</span>*Sc/OD;</span><br><span class="line">        <span class="keyword">double</span> ha=Math.sqrt(x*x-ka*ka);</span><br><span class="line">        <span class="keyword">double</span> hb=Math.sqrt(y*y-kb*kb);</span><br><span class="line">        <span class="keyword">double</span> hc=Math.sqrt(z*z-kc*kc);</span><br><span class="line">        ha=ha==<span class="number">0.0</span>?ha:-ha;</span><br><span class="line">        hb=hb==<span class="number">0.0</span>?hb:-hb;</span><br><span class="line">        hc=hc==<span class="number">0.0</span>?hc:-hc;</span><br><span class="line">        StringBuilder sb=<span class="keyword">new</span> StringBuilder();</span><br><span class="line">        sb.append(ha);</span><br><span class="line">        sb.append(<span class="string">" "</span>);</span><br><span class="line">        sb.append(hb);</span><br><span class="line">        sb.append(<span class="string">" "</span>);</span><br><span class="line">        sb.append(hc);</span><br><span class="line">        out.println(sb.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">double</span> <span class="title">getS</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">double</span> b,<span class="keyword">double</span> c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> p=(a+b+c)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">double</span> res=Math.sqrt(p*(p-a)*(p-b)*(p-c));</span><br><span class="line">        <span class="keyword">return</span> Double.isNaN(res)?<span class="number">0</span>:res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InputReader</span> </span>&#123;</span><br><span class="line">        BufferedReader buf;</span><br><span class="line">        StringTokenizer tok;</span><br><span class="line"></span><br><span class="line">        InputReader() &#123;</span><br><span class="line">            buf = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (tok == <span class="keyword">null</span> || !tok.hasMoreElements()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    tok = <span class="keyword">new</span> StringTokenizer(buf.readLine());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">String <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (hasNext()) <span class="keyword">return</span> tok.nextToken();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">nextLine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> buf.readLine();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">nextInt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.parseInt(next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">long</span> <span class="title">nextLong</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Long.parseLong(next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">double</span> <span class="title">nextDouble</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Double.parseDouble(next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">BigInteger <span class="title">nextBigInteger</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BigInteger(next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">BigDecimal <span class="title">nextBigDecimal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BigDecimal(next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="D题"><a href="#D题" class="headerlink" title="D题"></a>D题</h2><h3 id="描述-3"><a href="#描述-3" class="headerlink" title="描述"></a>描述</h3><p>两个玩家各自有合计 n 张的剪刀、石头、布的牌，每一轮玩家 1 先打出一张剩余的牌，另一名玩家再打出一张剩余的牌，双方都 想最大化自己赢的局数减去输的局数。问最终后手的得分。</p><p><a href="https://codeforces.com/gym/103117/problem/D" target="_blank" rel="noopener">原题</a></p><h3 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>官方思路</strong></p><ul><li>先手的决策没有意义，后手可以决定这 2n 张牌的匹配情况。</li><li>作为后手，只需要先尽量贪心匹配所有自己赢的 Pattern<br>（如尽量把自己的石头匹配对方的剪刀），再匹配平局的<br>Pattern，再匹配输的 Pattern 即可。</li><li>具体证明可以借助费用流的思想。</li></ul><p><strong>本人思路</strong></p><ul><li>基本思想和官方思路一样</li><li>借用map来存放后手能赢的情况，借用map1来存放后手和先手平局的情况<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-04-0:57</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">D</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        InputReader cin = <span class="keyword">new</span> InputReader();</span><br><span class="line">        PrintWriter out = <span class="keyword">new</span> PrintWriter(System.out, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">int</span> T=cin.nextInt();</span><br><span class="line">        HashMap&lt;Integer,Integer&gt; map1=<span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;()&#123;&#123;</span><br><span class="line">            put(<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line">            put(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">            put(<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line">        &#125;&#125;;</span><br><span class="line">        HashMap&lt;Integer,Integer&gt; map2=<span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;()&#123;&#123;</span><br><span class="line">            put(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">            put(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">            put(<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">        &#125;&#125;;</span><br><span class="line">        <span class="keyword">long</span>[][] arr;</span><br><span class="line">        <span class="keyword">while</span> (T--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            arr=<span class="keyword">new</span> <span class="keyword">long</span>[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)&#123;</span><br><span class="line">                    arr[i][j]=cin.nextLong();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">long</span> res=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">                <span class="keyword">long</span> k=arr[<span class="number">0</span>][map1.get(i)];</span><br><span class="line">                <span class="keyword">if</span>(k&gt;=arr[<span class="number">1</span>][i])&#123;</span><br><span class="line">                    res+=arr[<span class="number">1</span>][i];</span><br><span class="line">                    arr[<span class="number">0</span>][map1.get(i)]=k-arr[<span class="number">1</span>][i];</span><br><span class="line">                    arr[<span class="number">1</span>][i]=<span class="number">0</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    res+=k;</span><br><span class="line">                    arr[<span class="number">1</span>][i]-=k;</span><br><span class="line">                    arr[<span class="number">0</span>][map1.get(i)]=<span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">long</span> k2=arr[<span class="number">0</span>][i];</span><br><span class="line">                <span class="keyword">if</span>(k2&gt;=arr[<span class="number">1</span>][i])&#123;</span><br><span class="line">                    arr[<span class="number">0</span>][i]=k2-arr[<span class="number">1</span>][i];</span><br><span class="line">                    arr[<span class="number">1</span>][i]=<span class="number">0</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    arr[<span class="number">1</span>][i]-=k2;</span><br><span class="line">                    arr[<span class="number">0</span>][i]=<span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(arr[<span class="number">1</span>][i]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    res-=arr[<span class="number">1</span>][i];</span><br><span class="line">                    arr[<span class="number">0</span>][map2.get(i)]-=arr[<span class="number">1</span>][i];</span><br><span class="line">                    arr[<span class="number">1</span>][i]=<span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            out.println(res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InputReader</span> </span>&#123;</span><br><span class="line">        BufferedReader buf;</span><br><span class="line">        StringTokenizer tok;</span><br><span class="line"></span><br><span class="line">        InputReader() &#123;</span><br><span class="line">            buf = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (tok == <span class="keyword">null</span> || !tok.hasMoreElements()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    tok = <span class="keyword">new</span> StringTokenizer(buf.readLine());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">String <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (hasNext()) <span class="keyword">return</span> tok.nextToken();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">nextLine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> buf.readLine();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">nextInt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.parseInt(next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">long</span> <span class="title">nextLong</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Long.parseLong(next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">double</span> <span class="title">nextDouble</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Double.parseDouble(next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">BigInteger <span class="title">nextBigInteger</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BigInteger(next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">BigDecimal <span class="title">nextBigDecimal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BigDecimal(next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="H题"><a href="#H题" class="headerlink" title="H题"></a>H题</h2><h3 id="描述-4"><a href="#描述-4" class="headerlink" title="描述"></a>描述</h3><p>给定日语的一种动词变体规则，输出读入单词的变体</p><p><a href="https://codeforces.com/gym/103117/problem/H" target="_blank" rel="noopener">原题</a></p><h3 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>官方思路</strong></p><ul><li>按题意模拟即可。注意仔细读题。</li></ul><p><strong>本人思路</strong></p><ul><li>和官方一样</li></ul><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-04-0:11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">H</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        InputReader cin = <span class="keyword">new</span> InputReader();</span><br><span class="line">        PrintWriter out = <span class="keyword">new</span> PrintWriter(System.out, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">int</span> T=cin.nextInt();</span><br><span class="line">        HashMap&lt;String,String&gt; map=<span class="keyword">new</span> HashMap&lt;String,String&gt;()&#123;&#123;</span><br><span class="line">            put(<span class="string">"chimasu"</span>,<span class="string">"tte"</span>);</span><br><span class="line">            put(<span class="string">"rimasu"</span>,<span class="string">"tte"</span>);</span><br><span class="line">            put(<span class="string">"mimasu"</span>,<span class="string">"nde"</span>);</span><br><span class="line">            put(<span class="string">"bimasu"</span>,<span class="string">"nde"</span>);</span><br><span class="line">            put(<span class="string">"nimasu"</span>,<span class="string">"nde"</span>);</span><br><span class="line">            put(<span class="string">"kimasu"</span>,<span class="string">"ite"</span>);</span><br><span class="line">            put(<span class="string">"gimasu"</span>,<span class="string">"ide"</span>);</span><br><span class="line">            put(<span class="string">"shimasu"</span>,<span class="string">"shite"</span>);</span><br><span class="line">        &#125;&#125;;</span><br><span class="line">        <span class="keyword">while</span> (T--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            String str=cin.next();</span><br><span class="line">            String res=<span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">boolean</span> isRes=<span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(str.equals(<span class="string">"ikimasu"</span>))&#123;</span><br><span class="line">                out.println(<span class="string">"itte"</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> index=str.indexOf(<span class="string">"masu"</span>);</span><br><span class="line">            <span class="keyword">int</span> k1=index-<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">int</span> k2=index-<span class="number">3</span>;</span><br><span class="line">            <span class="keyword">if</span>(k1&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                String key=str.substring(k1,index+<span class="number">4</span>);</span><br><span class="line">                <span class="keyword">if</span>(map.containsKey(key))&#123;</span><br><span class="line">                    res=str.replace(key,map.get(key));</span><br><span class="line">                    isRes=<span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!isRes&amp;&amp;k2&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                String key=str.substring(k2,index+<span class="number">4</span>);</span><br><span class="line">                <span class="keyword">if</span>(map.containsKey(key))&#123;</span><br><span class="line">                    res=str.replace(key,map.get(key));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            out.println(res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InputReader</span> </span>&#123;</span><br><span class="line">        BufferedReader buf;</span><br><span class="line">        StringTokenizer tok;</span><br><span class="line"></span><br><span class="line">        InputReader() &#123;</span><br><span class="line">            buf = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (tok == <span class="keyword">null</span> || !tok.hasMoreElements()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    tok = <span class="keyword">new</span> StringTokenizer(buf.readLine());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">String <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (hasNext()) <span class="keyword">return</span> tok.nextToken();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">nextLine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> buf.readLine();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">nextInt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.parseInt(next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">long</span> <span class="title">nextLong</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Long.parseLong(next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">double</span> <span class="title">nextDouble</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Double.parseDouble(next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">BigInteger <span class="title">nextBigInteger</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BigInteger(next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">BigDecimal <span class="title">nextBigDecimal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BigDecimal(next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="K题"><a href="#K题" class="headerlink" title="K题"></a>K题</h2><h3 id="描述-5"><a href="#描述-5" class="headerlink" title="描述"></a>描述</h3><p>给定 n, k，构造一个 1 − n 的排列 p1, p2, · · · , pn，使得满足 pi + k = pi+1 的下标 i 最多。</p><p><a href="https://codeforces.com/gym/103117/problem/K" target="_blank" rel="noopener">原题</a></p><h3 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>官方思路</strong></p><ul><li>将 MOD k 相同的值放在一起，从小到大依次输出。显然可 以达到理论最大值。</li></ul><p><strong>本人思路</strong></p><ul><li>用一个total=n来表示还剩多少数没加入序列</li><li>i从1开始查找满足 pi + k = pi+1 的子序列</li></ul><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-04-5:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">K</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        InputReader cin = <span class="keyword">new</span> InputReader();</span><br><span class="line">        PrintWriter out = <span class="keyword">new</span> PrintWriter(System.out, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">int</span> n=cin.nextInt();</span><br><span class="line">        <span class="keyword">int</span> k=cin.nextInt();</span><br><span class="line">        StringBuilder sb=<span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">int</span> total=n;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;total&gt;<span class="number">0</span>;i++)&#123;</span><br><span class="line">           sb.append(i);</span><br><span class="line">           total--;</span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> j=i+k;j&lt;=n&amp;&amp;total&gt;<span class="number">0</span>;j+=k)&#123;</span><br><span class="line">               sb.append(<span class="string">" "</span>);</span><br><span class="line">               sb.append(j);</span><br><span class="line">               total--;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span>(total&gt;<span class="number">0</span>)&#123;</span><br><span class="line">               sb.append(<span class="string">" "</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       out.println(sb.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InputReader</span> </span>&#123;</span><br><span class="line">        BufferedReader buf;</span><br><span class="line">        StringTokenizer tok;</span><br><span class="line"></span><br><span class="line">        InputReader() &#123;</span><br><span class="line">            buf = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (tok == <span class="keyword">null</span> || !tok.hasMoreElements()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    tok = <span class="keyword">new</span> StringTokenizer(buf.readLine());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">String <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (hasNext()) <span class="keyword">return</span> tok.nextToken();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">nextLine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> buf.readLine();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">nextInt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.parseInt(next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">long</span> <span class="title">nextLong</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Long.parseLong(next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">double</span> <span class="title">nextDouble</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Double.parseDouble(next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">BigInteger <span class="title">nextBigInteger</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BigInteger(next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">BigDecimal <span class="title">nextBigDecimal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BigDecimal(next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="M题"><a href="#M题" class="headerlink" title="M题"></a>M题</h2><h3 id="描述-6"><a href="#描述-6" class="headerlink" title="描述"></a>描述</h3><p>有 n 个旅客在位置 0 同时出发赶飞机，飞机的位置是 x。第 i 个 人以 si 的速度匀速运动。初始时，飞机预定在时刻 p0 起飞。有 m 个广播，第 i 个广播在 ti 时刻告诉所有旅客飞机延误到了 pi， 保证 ti 和 pi 是递增的。每个旅客在每个时刻都会根据当前自己 的位置、当前自己的速度和当前预定的起飞时间来决定行动：如 果赶得上飞机就继续移动，否则就原地停留。问最终有多少个旅 客赶得上飞机。</p><p><a href="https://codeforces.com/gym/103117/problem/M" target="_blank" rel="noopener">原题</a></p><h3 id="解题思路-6"><a href="#解题思路-6" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>官方思路</strong></p><ul><li>注意到 pi 是递增的，因此一个旅客开始移动后就一定会到 达终点。 </li><li>判断一个旅客 j 是否会开始移动，相当于判断是否存在一个 i，使得 sj ∗ (pi − ti) ≥ x。因此可以由最大的 pi − ti 判断。 </li><li>找到最大的 pi − ti（令 t0 = 0），依次判断每一个旅客能否在 maxi (pi − ti) 的时间里走完 x 的距离即可。 </li><li>时间复杂度 O(n + m)。</li></ul><p><strong>本人思路</strong></p><ul><li>对移动速度数组进行排序，从最大的速度开始查找。</li></ul><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-04-7:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">M</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        InputReader cin = <span class="keyword">new</span> InputReader();</span><br><span class="line">        PrintWriter out = <span class="keyword">new</span> PrintWriter(System.out, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">int</span> n=cin.nextInt();</span><br><span class="line">        <span class="keyword">int</span> k=cin.nextInt();</span><br><span class="line">        <span class="keyword">int</span> x=cin.nextInt();</span><br><span class="line">        <span class="keyword">long</span> p0=cin.nextLong();</span><br><span class="line">        <span class="keyword">long</span>[] speeds=<span class="keyword">new</span> <span class="keyword">long</span>[n];</span><br><span class="line">        <span class="keyword">long</span>[] times=<span class="keyword">new</span> <span class="keyword">long</span>[k+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">long</span>[] postponed=<span class="keyword">new</span> <span class="keyword">long</span>[k+<span class="number">1</span>];</span><br><span class="line">        postponed[<span class="number">0</span>]=p0;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            speeds[i]=cin.nextLong();</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(speeds);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line">            times[i]=cin.nextLong();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line">            postponed[i]=cin.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> index=n-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=k;i++)&#123;</span><br><span class="line">           <span class="keyword">long</span> t=postponed[i]-times[i];</span><br><span class="line">           <span class="keyword">while</span> (index&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">               <span class="keyword">long</span> dx=t*speeds[index];</span><br><span class="line">               <span class="keyword">if</span>(dx&gt;=x)&#123;</span><br><span class="line">                   res++;</span><br><span class="line">                   index--;</span><br><span class="line">               &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">       out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InputReader</span> </span>&#123;</span><br><span class="line">        BufferedReader buf;</span><br><span class="line">        StringTokenizer tok;</span><br><span class="line"></span><br><span class="line">        InputReader() &#123;</span><br><span class="line">            buf = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (tok == <span class="keyword">null</span> || !tok.hasMoreElements()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    tok = <span class="keyword">new</span> StringTokenizer(buf.readLine());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">String <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (hasNext()) <span class="keyword">return</span> tok.nextToken();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">nextLine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> buf.readLine();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">nextInt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.parseInt(next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">long</span> <span class="title">nextLong</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Long.parseLong(next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">double</span> <span class="title">nextDouble</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Double.parseDouble(next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">BigInteger <span class="title">nextBigInteger</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BigInteger(next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">BigDecimal <span class="title">nextBigDecimal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BigDecimal(next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2021-年第十三届四川省-ACM-ICPC-大学生程序设计竞赛部分题解&quot;&gt;&lt;a href=&quot;#2021-年第十三届四川省-ACM-ICPC-大学生程序设计竞赛部分题解&quot; class=&quot;headerlink&quot; title=&quot;2021 年第十三届四川省 ACM-IC</summary>
      
    
    
    
    <category term="编程" scheme="http://blog.czhlin.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="ACM" scheme="http://blog.czhlin.top/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>剑指 Offer 11. 旋转数组的最小数字</title>
    <link href="http://blog.czhlin.top/2020/07/22/%E5%89%91%E6%8C%87%20Offer%2011.%20%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97/"/>
    <id>http://blog.czhlin.top/2020/07/22/%E5%89%91%E6%8C%87%20Offer%2011.%20%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97/</id>
    <published>2020-07-22T01:56:32.535Z</published>
    <updated>2021-04-24T12:37:57.651Z</updated>
    
    <content type="html"><![CDATA[<h6 id="描述"><a href="#描述" class="headerlink" title="描述:"></a>描述:</h6><p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个递增排序的数组的一个旋转，输出旋转数组的最小元素。例如，数组 [3,4,5,1,2] 为 [1,2,3,4,5] 的一个旋转，该数组的最小值为1。  </p><h6 id="示例1："><a href="#示例1：" class="headerlink" title="示例1："></a>示例1：</h6><blockquote><p>输入: [3,4,5,1,2]<br>输出: 1</p></blockquote><h6 id="示例2"><a href="#示例2" class="headerlink" title="示例2:"></a>示例2:</h6><blockquote><p>输入: [2,2,2,0,1]<br>输出: 0</p></blockquote><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><h4 id="一、遍历法："><a href="#一、遍历法：" class="headerlink" title="一、遍历法："></a>一、遍历法：</h4><p>遍历每一一个元素,对于numbers[i+1]&lt; numbers[i]时直接返回numders[i+1]遍历完仍没找到,则直接返回 numbers[0];</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minArray</span><span class="params">(<span class="keyword">int</span>[] numbers)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;numbers.length-<span class="number">1</span>;i++)</span><br><span class="line">            <span class="keyword">if</span>(numbers[i]&gt;numbers[i+<span class="number">1</span>]) <span class="keyword">return</span> numbers[i+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> numbers[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二、二分法："><a href="#二、二分法：" class="headerlink" title="二、二分法："></a>二、二分法：</h4><p>numbers[m] &lt; numbers[r]时说明numbers[m]是目标值或者目标值在左边<br>numbers[m] &gt; numbers[r]时说明目标值在左边.<br>numbers[m]==numbers[r]时需要进行r–来试探</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minArray</span><span class="params">(<span class="keyword">int</span>[] numbers)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">int</span> l=<span class="number">0</span>,r=numbers.length-<span class="number">1</span>,m=r/<span class="number">2</span>;</span><br><span class="line">         <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">             <span class="keyword">if</span>(numbers[m]&lt;numbers[r])r=m;</span><br><span class="line">             <span class="keyword">else</span> <span class="keyword">if</span>(numbers[m]&gt;numbers[r])l=m+<span class="number">1</span>;</span><br><span class="line">             <span class="keyword">else</span> --r;</span><br><span class="line">             m=l+(r-l)/<span class="number">2</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> numbers[l];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h6 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述:&quot;&gt;&lt;/a&gt;描述:&lt;/h6&gt;&lt;p&gt;把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个递增排序的数组的一个旋转，输出旋转数组的最小元素。例如，数组 </summary>
      
    
    
    
    <category term="编程" scheme="http://blog.czhlin.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="力扣" scheme="http://blog.czhlin.top/tags/%E5%8A%9B%E6%89%A3/"/>
    
  </entry>
  
  <entry>
    <title>不同的二叉搜索树 II</title>
    <link href="http://blog.czhlin.top/2020/07/22/%E4%B8%8D%E5%90%8C%E7%9A%84%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%20II/"/>
    <id>http://blog.czhlin.top/2020/07/22/%E4%B8%8D%E5%90%8C%E7%9A%84%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%20II/</id>
    <published>2020-07-22T01:39:02.374Z</published>
    <updated>2021-04-24T12:36:53.303Z</updated>
    
    <content type="html"><![CDATA[<h2 id="不同的二叉搜索树-II"><a href="#不同的二叉搜索树-II" class="headerlink" title="不同的二叉搜索树 II"></a>不同的二叉搜索树 II</h2><hr><h6 id="描述："><a href="#描述：" class="headerlink" title="描述："></a>描述：</h6><p> 给定一个整数 n，生成所有由 1 … n 为节点所组成的 二叉搜索树 。</p><h6 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h6><ul><li>0 &lt;= n &lt;= 8</li></ul><h6 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h6><blockquote><p>输入: 3</p></blockquote><blockquote><p>输出: </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [1,null,3,2],</span><br><span class="line">  [3,2,null,1],</span><br><span class="line">  [3,1,null,null,2],</span><br><span class="line">  [2,1,3],</span><br><span class="line">  [1,null,2,null,3]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>解释: 以上的输出对应以下 5 种不同结构的二叉搜索树：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1         3     3      2      1</span><br><span class="line"> \       &#x2F;     &#x2F;      &#x2F; \      \</span><br><span class="line">  3     2     1      1   3      2</span><br><span class="line"> &#x2F;     &#x2F;       \                 \</span><br><span class="line">2     1         2                 3</span><br></pre></td></tr></table></figure><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><h4 id="一、递归法："><a href="#一、递归法：" class="headerlink" title="一、递归法："></a>一、递归法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;TreeNode&gt; <span class="title">generateTrees</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> generateTrees(<span class="number">1</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;TreeNode&gt; <span class="title">generateTrees</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        List&lt;TreeNode&gt; allTrees = <span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</span><br><span class="line">        <span class="keyword">if</span> (start &gt; end) &#123;</span><br><span class="line">            allTrees.add(<span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">return</span> allTrees;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 枚举可行根节点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt;= end; i++) &#123;</span><br><span class="line">            <span class="comment">// 获得所有可行的左子树集合</span></span><br><span class="line">            List&lt;TreeNode&gt; leftTrees = generateTrees(start, i - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获得所有可行的右子树集合</span></span><br><span class="line">            List&lt;TreeNode&gt; rightTrees = generateTrees(i + <span class="number">1</span>, end);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 从左子树集合中选出一棵左子树，从右子树集合中选出一棵右子树，拼接到根节点上</span></span><br><span class="line">            <span class="keyword">for</span> (TreeNode left : leftTrees) &#123;</span><br><span class="line">                <span class="keyword">for</span> (TreeNode right : rightTrees) &#123;</span><br><span class="line">                    TreeNode currTree = <span class="keyword">new</span> TreeNode(i);</span><br><span class="line">                    currTree.left = left;</span><br><span class="line">                    currTree.right = right;</span><br><span class="line">                    allTrees.add(currTree);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> allTrees;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;不同的二叉搜索树-II&quot;&gt;&lt;a href=&quot;#不同的二叉搜索树-II&quot; class=&quot;headerlink&quot; title=&quot;不同的二叉搜索树 II&quot;&gt;&lt;/a&gt;不同的二叉搜索树 II&lt;/h2&gt;&lt;hr&gt;
&lt;h6 id=&quot;描述：&quot;&gt;&lt;a href=&quot;#描述：&quot; clas</summary>
      
    
    
    
    <category term="编程" scheme="http://blog.czhlin.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="力扣" scheme="http://blog.czhlin.top/tags/%E5%8A%9B%E6%89%A3/"/>
    
  </entry>
  
  <entry>
    <title>两数之和 II - 输入有序数组</title>
    <link href="http://blog.czhlin.top/2020/07/22/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C%20II%20-%20%E8%BE%93%E5%85%A5%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/"/>
    <id>http://blog.czhlin.top/2020/07/22/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C%20II%20-%20%E8%BE%93%E5%85%A5%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/</id>
    <published>2020-07-22T00:53:35.166Z</published>
    <updated>2021-04-24T12:38:25.710Z</updated>
    
    <content type="html"><![CDATA[<h6 id="描述："><a href="#描述：" class="headerlink" title="描述："></a>描述：</h6><p>给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。</p><p>函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。</p><h6 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h6><ul><li>返回的下标值（index1 和 index2）不是从零开始的</li><li>你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素</li></ul><h6 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h6><blockquote><p>输入： numbers = [2, 7, 11, 15], target = 9</p></blockquote><blockquote><p>输出： [1,2]</p></blockquote><blockquote><p>解释：2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。</p></blockquote><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><h4 id="一、暴力穷举法："><a href="#一、暴力穷举法：" class="headerlink" title="一、暴力穷举法："></a>一、暴力穷举法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*暴力枚举:时间复杂度:O(n*n);空间复杂度:O(1)*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numbers.length-<span class="number">1</span>;i++) &#123;</span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;numbers.length;j++)&#123;</span><br><span class="line">               <span class="keyword">if</span>(numbers[i]+numbers[j]==target)</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;i+<span class="number">1</span>,j+<span class="number">1</span>&#125;;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二、二分法："><a href="#二、二分法：" class="headerlink" title="二、二分法："></a>二、二分法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*二分法:时间复杂度:O(n*logn);空间复杂度:O(1)*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">int</span> l,r,m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numbers.length; ++i) &#123;</span><br><span class="line">            l= i + <span class="number">1</span>;r= numbers.length - <span class="number">1</span>;m=l+(r-l)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">while</span> (l&lt;=r) &#123;</span><br><span class="line">                <span class="keyword">if</span> (numbers[m] == target - numbers[i])</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;i + <span class="number">1</span>, m+ <span class="number">1</span>&#125;;</span><br><span class="line">                <span class="keyword">if</span> (numbers[m] &gt; target - numbers[i])r=m-<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> l=m+<span class="number">1</span>;</span><br><span class="line">                m=l+(r-l)/<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="三、哈希表法："><a href="#三、哈希表法：" class="headerlink" title="三、哈希表法："></a>三、哈希表法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*哈希表:时间复杂度:O(n);空间复杂度:O(n)*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        HashMap&lt;Integer,Integer&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;numbers.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(target-numbers[i]))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;map.get(target-numbers[i]),i+<span class="number">1</span>&#125;;</span><br><span class="line">            map.put(numbers[i],i+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>,-<span class="number">1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="四、双指针："><a href="#四、双指针：" class="headerlink" title="四、双指针："></a>四、双指针：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*双指针:时间复杂度：O(n);空间复杂度O(1)*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = numbers.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;right)&#123;</span><br><span class="line">            sum = numbers[left] + numbers[right];</span><br><span class="line">            <span class="keyword">if</span>(sum==target)<span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;left+<span class="number">1</span>, right+<span class="number">1</span>&#125;;</span><br><span class="line">            <span class="keyword">if</span>(sum &gt; target) right--;</span><br><span class="line">            <span class="keyword">else</span> left++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>,-<span class="number">1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="五、二分-双指针："><a href="#五、二分-双指针：" class="headerlink" title="五、二分+双指针："></a>五、二分+双指针：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*二分+双指针:时间复杂度:O(longn)&lt;=O(n)&lt;=O(logn+n);空间复杂度:O(1)*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">0</span>,r=numbers.length-<span class="number">1</span>,m=r/<span class="number">2</span>,t=target/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="keyword">if</span>(numbers[m]&lt;t)l=m+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> r=m;</span><br><span class="line">            m=l+(r-l)/<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(numbers[r]*<span class="number">2</span> &gt; target)&#123;</span><br><span class="line">            l = r - <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            l = r;</span><br><span class="line">            r++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(l&gt;=<span class="number">0</span>||r&lt;numbers.length)&#123;</span><br><span class="line">            <span class="keyword">int</span> sum=numbers[l]+numbers[r];</span><br><span class="line">            <span class="keyword">if</span>(sum==target)<span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;l+<span class="number">1</span>,r+<span class="number">1</span>&#125;;</span><br><span class="line">            <span class="keyword">if</span>(sum&lt;target)r++;</span><br><span class="line">            <span class="keyword">else</span> l--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>,-<span class="number">1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h6 id=&quot;描述：&quot;&gt;&lt;a href=&quot;#描述：&quot; class=&quot;headerlink&quot; title=&quot;描述：&quot;&gt;&lt;/a&gt;描述：&lt;/h6&gt;&lt;p&gt;给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。&lt;/p&gt;
&lt;p&gt;函数应该返回这两个下标值 index1 和</summary>
      
    
    
    
    <category term="编程" scheme="http://blog.czhlin.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="力扣" scheme="http://blog.czhlin.top/tags/%E5%8A%9B%E6%89%A3/"/>
    
  </entry>
  
  <entry>
    <title>戳气球</title>
    <link href="http://blog.czhlin.top/2020/07/19/%E6%88%B3%E6%B0%94%E7%90%83/"/>
    <id>http://blog.czhlin.top/2020/07/19/%E6%88%B3%E6%B0%94%E7%90%83/</id>
    <published>2020-07-19T04:05:43.521Z</published>
    <updated>2021-04-24T12:37:22.652Z</updated>
    
    <content type="html"><![CDATA[<h6 id="描述："><a href="#描述：" class="headerlink" title="描述："></a>描述：</h6><p>  有 n 个气球，编号为0 到 n-1，每个气球上都标有一个数字，这些数字存在数组 nums 中。</p><p>  现在要求你戳破所有的气球。如果你戳破气球 i ，就可以获得 nums[left] * nums[i] * nums[right]个硬币。 这里的 left 和 right 代表和 i 相邻的两个气球的序号。注意当你戳破了气球 i 后，气球 left 和气球 right 就变成了相邻的气球。</p><p>求所能获得硬币的最大数量。</p><h6 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h6><ul><li>你可以假设 nums[-1] = nums[n] = 1，但注意它们不是真实存在的所以并不能被戳破。</li><li>0 ≤ n ≤ 500, 0 ≤ nums[i] ≤ 100<h6 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h6><blockquote><p>输入: [3,1,5,8]</p></blockquote></li></ul><blockquote><p>输出: 167 </p></blockquote><blockquote><p>解释: nums = [3,1,5,8] –&gt; [3,5,8] –&gt;   [3,8]   –&gt;  [8]  –&gt; []</p></blockquote><blockquote><p>coins =  3 * 1 * 5      +  3 * 5 * 8    +  1 * 3 * 8      + 1 * 8 * 1   = 167</p></blockquote><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><h4 id="一、回溯法："><a href="#一、回溯法：" class="headerlink" title="一、回溯法："></a>一、回溯法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> res = Integer.MIN_VALUE;</span><br><span class="line"><span class="comment">/* 输入一组气球，返回戳破它们获得的最大分数 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxCoins</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    backtrack(nums, <span class="number">0</span>); </span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 回溯算法的伪码解法 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> socre)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums 为空) &#123;</span><br><span class="line">        res = max(res, score);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> point = nums[i-<span class="number">1</span>] * nums[i] * nums[i+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> temp = nums[i];</span><br><span class="line">        <span class="comment">// 做选择</span></span><br><span class="line">        在 nums 中删除元素 nums[i]</span><br><span class="line">        <span class="comment">// 递归回溯</span></span><br><span class="line">        backtrack(nums, score + point);</span><br><span class="line">        <span class="comment">// 撤销选择</span></span><br><span class="line">        将 temp 还原到 nums[i]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二、动态规划："><a href="#二、动态规划：" class="headerlink" title="二、动态规划："></a>二、动态规划：</h4><p>动态规划算法的一个重要的条件：子问题必须独立。对于戳气球的问题，如果要用动态规划，就必须要巧妙的dp的含义,避免子问题的相关性。</p><h5 id="dp数组的定义："><a href="#dp数组的定义：" class="headerlink" title="dp数组的定义："></a>dp数组的定义：</h5><ul><li>将nums[-1] = nums[n] = 1作为新边界形成新的数组points[n+2];</li><li>对于数组points来说dp[i][j]=x表示：戳破i和j之间所有的气球，可以获得最高的分数为x。</li><li>由于i到j之间可能有多个气球，从正向来看无法推出合理的dp[i][j]的状态转移方程，所以可以从逆向来看。</li><li>设i &lt; k &lt; j,nums[k]表示dp[i][j]中最后戳破的气球。dp[i][j]=max( dp[i][k]+dp[k][j]+nums[i] * nums[k] * nums[j] );</li><li>本题所求dp[0][n+1];</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxCoins</span><span class="params">(<span class="keyword">int</span>[] nums)</span></span>&#123;</span><br><span class="line">        <span class="comment">/*获取nums的长度*/</span></span><br><span class="line">        <span class="keyword">int</span> n=nums.length;</span><br><span class="line">        <span class="comment">/*定义新数组points*/</span></span><br><span class="line">        <span class="keyword">int</span>[] points=<span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">2</span>];</span><br><span class="line">        <span class="comment">/*nums[-1]=nums[n]=1*/</span></span><br><span class="line">        points[<span class="number">0</span>]=points[n+<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            points[i+<span class="number">1</span>]=nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*定义dp数组*/</span></span><br><span class="line">        <span class="keyword">int</span>[][]dp=<span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">2</span>][n+<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n+<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">             <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=n+<span class="number">1</span>;j++)&#123;</span><br><span class="line">                  <span class="keyword">for</span>(<span class="keyword">int</span> k=i+<span class="number">1</span>;k&lt;j;k++)&#123;</span><br><span class="line">                      <span class="comment">/*dp[i][j]=max( dp[i][k]+dp[k][j]+nums[i] * nums[k] * nums[j] );</span></span><br><span class="line"><span class="comment">                        i&lt;j&lt;j;*/</span></span><br><span class="line">                      dp[i][j]=Math.max(dp[i][j],dp[i][k]+dp[k][j]+points[k]*points[i]*points[j]);</span><br><span class="line">                  &#125;</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][n+<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h6 id=&quot;描述：&quot;&gt;&lt;a href=&quot;#描述：&quot; class=&quot;headerlink&quot; title=&quot;描述：&quot;&gt;&lt;/a&gt;描述：&lt;/h6&gt;&lt;p&gt;  有 n 个气球，编号为0 到 n-1，每个气球上都标有一个数字，这些数字存在数组 nums 中。&lt;/p&gt;
&lt;p&gt;  现在要求你戳</summary>
      
    
    
    
    <category term="编程" scheme="http://blog.czhlin.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="力扣" scheme="http://blog.czhlin.top/tags/%E5%8A%9B%E6%89%A3/"/>
    
  </entry>
  
</feed>
